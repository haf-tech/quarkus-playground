# Task: yq
# Source: https://github.com/tektoncd/catalog/blob/main/task/yq/0.3/yq.yaml
# v0.3
#
# Enhancements:
# - context dir
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: promote-version
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/categories: Developer Tools
    tekton.dev/tags: git, yq, promotion
    tekton.dev/displayName: "Promote version"
    tekton.dev/platforms: "linux/amd64"
spec:
  description: >-
    Promotes a version. Updates the configuration/manifest and push the updated manifest (with version/tag/digest) back to git
  workspaces:
    - name: source
      description: A workspace that contains the file which needs to be altered.
  params:
    - description: git url to clone
      name: GIT_URL
      type: string
    - default: ''
      description: 'git revision to checkout (branch, tag, sha, refâ€¦)'
      name: GIT_REVISION
      type: string
    - default: ''
      description: (optional) git refspec to fetch before checking out revision
      name: GIT_REF
      type: string
    - default: 'true'
      description: defines if the resource should initialize and fetch the submodules
      name: GIT_SUBMODULES
      type: string
    - default: '1'
      description: >-
        performs a shallow clone where only the most recent commit(s) will be
        fetched
      name: GIT_DEPTH
      type: string
    - default: 'true'
      description: >-
        defines if http.sslVerify should be set to true or false in the global
        git config
      name: GIT_SSL_VERIFY
      type: string
    - default: ''
      description: >-
        defines which directories patterns to match or exclude when performing a
        sparse checkout
      name: GIT_SPARSE_CHECKOUT_DIRS
      type: string
    - default: 'true'
      description: >-
        clean out the contents of the repo's destination directory (if it
        already exists) before trying to clone the repo there
      name: GIT_DELETE_EXISTING
      type: string
    - default: ''
      description: git HTTP proxy server for non-SSL requests
      name: HTTP_PROXY
      type: string
    - default: ''
      description: git HTTPS proxy server for SSL requests
      name: HTTPS_PROXY
      type: string
    - default: ''
      description: git no proxy - opt out of proxying HTTP/HTTPS requests
      name: NO_PROXY
      type: string
    - default: 'true'
      description: log the commands used during execution
      name: VERBOSE
      type: string
    - name: FILES
      type: array
      description: A list of files to execute the expression on. Needs to be relative to the source workspace.
    - name: EXPRESSION
      type: string
      description: The yq expression to apply. Can be used to replace yaml fields.
    - name: YQ_IMAGE
      type: string
      description: The yq image to use.
      default: docker.io/mikefarah/yq:4.21.1@sha256:7d9b09f45f5df8874bfc4d63b3d00e5b80b0751e0770bdde197c0f5a9b2e487d
    - name: CONTEXT_DIR
      type: string
      description: Context directory
      default: 'src_manifest'
    - name: IMAGE_DIGEST
      type: string
      description: Image digest
    - name: GIT_IMAGE
      type: string
      description: The git image to use.
      default: registry.redhat.io/openshift-pipelines/pipelines-git-init-rhel8@sha256:afc5d3f9efe26c7042635d43b8ffd09d67936e3d0b6b901dc08a33e20313d361
  steps:
    - image: $(params.GIT_IMAGE)
      name: clone
      resources: {}
      script: >
        #!/bin/sh

        set -eu -o pipefail


        if [[ "$(params.VERBOSE)" == "true" ]] ; then
          set -x
        fi


        CHECKOUT_DIR="$(workspaces.source.path)/$(params.CONTEXT_DIR)"


        cleandir() {
          # Delete any existing contents of the repo directory if it exists.
          #
          # We don't just "rm -rf $CHECKOUT_DIR" because $CHECKOUT_DIR might be "/"
          # or the root of a mounted volume.
          if [[ -d "$CHECKOUT_DIR" ]] ; then
            # Delete non-hidden files and directories
            rm -rf "$CHECKOUT_DIR"/*
            # Delete files and directories starting with . but excluding ..
            rm -rf "$CHECKOUT_DIR"/.[!.]*
            # Delete files and directories starting with .. plus any other character
            rm -rf "$CHECKOUT_DIR"/..?*
          fi
        }


        if [[ "$(params.GIT_DELETE_EXISTING)" == "true" ]] ; then
          cleandir
        fi


        test -z "$(params.HTTP_PROXY)" || export HTTP_PROXY=$(params.HTTP_PROXY)

        test -z "$(params.HTTPS_PROXY)" || export
        HTTPS_PROXY=$(params.HTTPS_PROXY)

        test -z "$(params.NO_PROXY)" || export NO_PROXY=$(params.NO_PROXY)


        /ko-app/git-init \
          -url "$(params.GIT_URL)" \
          -revision "$(params.GIT_REVISION)" \
          -refspec "$(params.GIT_REF)" \
          -path "$CHECKOUT_DIR" \
          -sslVerify="$(params.GIT_SSL_VERIFY)" \
          -submodules="$(params.GIT_SUBMODULES)" \
          -depth "$(params.GIT_DEPTH)" \
          -sparseCheckoutDirectories "$(params.GIT_SPARSE_CHECKOUT_DIRS)"
        cd "$CHECKOUT_DIR"

        RESULT_SHA="$(git rev-parse HEAD)"

        EXIT_CODE="$?"

        if [ "$EXIT_CODE" != 0 ] ; then
          exit $EXIT_CODE
        fi

        # ensure we don't add a trailing newline to the result

        echo -n "$RESULT_SHA" > $(results.commit.path)

        echo -n "$(params.GIT_URL)" > $(results.url.path)
    - name: replace-in-yaml
      image: $(params.YQ_IMAGE)
      workingDir: $(workspaces.source.path)/$(params.CONTEXT_DIR)
      args: ["$(params.FILES[*])"]
      script: |
        #!/usr/bin/env sh
        set -e

        for var in "$@"
        do
            echo $var
            echo "$(params.EXPRESSION)"
            pwd
            ls -l 
            echo "--------------------"
            ls -l /workspace/source/src_manifest/helm/
            echo "--------------------"
            /usr/bin/yq eval '$(params.EXPRESSION)' -i "$(pwd)/$var" -v
        done
    - name: push-git
      image: $(params.GIT_IMAGE)
      workingDir: $(workspaces.source.path)/$(params.CONTEXT_DIR)
      script: |
        #!/usr/bin/env sh
        set -e

        git config --global user.email "gitops@haddouti.com"
        git config --global user.name "GitOps Pipeline"



        git add "."
        git commit -m "Updates "
        git push -v
